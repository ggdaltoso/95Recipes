{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["localforage","config","driver","WEBSQL","name","version","size","storeName","description","Hero","styled","h1","Recipes","div","App","useState","recipes","setRecipes","selectedRecipe","setSelectedRecipe","showModal","toggleModal","closeModal","useEffect","a","getItem","console","log","Tabletop","init","key","callback","_","models","Object","values","forEach","m","tabletop","raw","pIndex","elements","findIndex","e","Ingredientes","toLowerCase","includes","ingredients","slice","preparation","length","setItem","simpleSheet","fetchData","map","onClick","width","window","innerWidth","height","innerHeight","style","top","icon","title","buttons","value","position","bottom","left","right","p","display","justifyContent","alignItems","padding","marginRight","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"srBAcAA,IAAYC,OAAO,CACjBC,OAAQF,IAAYG,OACpBC,KAAM,eACNC,QAAS,EACTC,KAAM,QACNC,UAAW,UACXC,YAAa,qCAGf,IAAMC,EAAOC,UAAOC,GAAV,KAMJC,EAAUF,UAAOG,IAAV,KA8GEC,MAvGf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAE+BF,mBAAS,IAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGoBJ,oBAAS,GAH7B,mBAGNK,EAHM,KAGKC,EAHL,KASb,SAASC,IACPD,GAAY,GAuCd,OApCAE,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBxB,IAAYyB,QAAQ,WAD5C,QACQT,EADR,SA2BIU,QAAQC,IAAI,wBAAyBX,GACrCC,EAAWD,IAxBXY,IAASC,KAAK,CACZC,IAAK,+CACLC,SAAU,SAACC,EAAD,GAAoB,IAAdC,EAAa,EAAbA,OACdC,OAAOC,OAAOF,GAAQG,SAAQ,SAAAC,UACrBA,EAAEC,gBACFD,EAAEE,IAET,IAAMC,EAASH,EAAEI,SAASC,WAAU,SAAAC,GAAC,OACnCA,EAAEC,aAAaC,cAAcC,SAAS,cAGxCT,EAAEU,YAAcV,EAAEI,SAASO,MAAM,EAAGR,GACpCH,EAAEY,YAAcZ,EAAEI,SAASO,MAAMR,EAAS,EAAGH,EAAEI,SAASS,WAG1DxB,QAAQC,IAAIM,GAEZjC,IAAYmD,QAAQ,UAAWlB,GAC/BhB,EAAWgB,IAEbmB,aAAa,IAxBnB,4CADc,uBAAC,WAAD,wBAiCdC,KACC,IAGD,kBAAC,gBAAD,KACE,kBAAC,cAAD,MACA,kBAAC5C,EAAD,oBAEA,kBAACG,EAAD,KACGsB,OAAOC,OAAOnB,GAASsC,KAAI,gBAAGlD,EAAH,EAAGA,KAAH,OAC1B,kBAAC,QAAD,CACE0B,IAAK1B,EACLmD,QAAS,WACPpC,EAAkBf,GArD5BiB,GAAY,KAyDHjB,OAKNgB,GACC,kBAAC,QAAD,CACEoC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YAAc,GAC7BC,MAAO,CAAEC,IAAK,GACdC,KAAK,WACLC,MAAO9C,EACPI,WAAYA,EACZ2C,QAAS,CAAC,CAAEC,MAAO,QAASX,QAASjC,KAEpCJ,GAIL,kBAAC,QAAD,CACE2C,MAAO,CAAEM,SAAU,SAAUC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,GACxDd,MAAM,OACNe,EAAG,GAEH,kBAAC,SAAD,CACEV,MAAO,CACLW,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,QAAS,YAGX,kBAAC,IAAD,CAAMvE,KAAK,OAAOyD,MAAO,CAAEe,YAAa,GAAKpB,MAAO,GAAIG,OAAQ,KARlE,YC/GYkB,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.e504a12f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Tabletop from 'tabletop';\nimport styled from '@xstyled/styled-components';\nimport {\n  ThemeProvider,\n  GlobalStyle,\n  Frame,\n  Modal,\n  Button,\n} from '@react95/core/dist';\n\nimport localforage from 'localforage';\nimport Icon from '@react95/core/dist/Icon';\n\nlocalforage.config({\n  driver: localforage.WEBSQL,\n  name: '95Recipes.db',\n  version: 1.0,\n  size: 4980736,\n  storeName: 'recipes',\n  description: 'Contains all recipes information',\n});\n\nconst Hero = styled.h1`\n  font-size: 40px;\n  width: 100%;\n  text-align: center;\n`;\n\nconst Recipes = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 10px;\n  padding: 0 20px;\n`;\n\nfunction App() {\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState([]);\n  const [showModal, toggleModal] = useState(false);\n\n  function openModal() {\n    toggleModal(true);\n  }\n\n  function closeModal() {\n    toggleModal(false);\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      const recipes = await localforage.getItem('recipes');\n\n      if (!recipes) {\n        Tabletop.init({\n          key: '1Uou8R5Bgrdl9M8ykKZeSj5MAl_huugiG3rRIQyMtxvI',\n          callback: (_, { models }) => {\n            Object.values(models).forEach(m => {\n              delete m.tabletop;\n              delete m.raw;\n\n              const pIndex = m.elements.findIndex(e =>\n                e.Ingredientes.toLowerCase().includes('preparo'),\n              );\n\n              m.ingredients = m.elements.slice(0, pIndex);\n              m.preparation = m.elements.slice(pIndex + 1, m.elements.length);\n            });\n\n            console.log(models);\n\n            localforage.setItem('recipes', models);\n            setRecipes(models);\n          },\n          simpleSheet: true,\n        });\n      } else {\n        console.log('Tinha no localStorage', recipes);\n        setRecipes(recipes);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <ThemeProvider>\n      <GlobalStyle />\n      <Hero>95 Receitas</Hero>\n\n      <Recipes>\n        {Object.values(recipes).map(({ name }) => (\n          <Frame\n            key={name}\n            onClick={() => {\n              setSelectedRecipe(name);\n              openModal();\n            }}\n          >\n            {name}\n          </Frame>\n        ))}\n      </Recipes>\n\n      {showModal && (\n        <Modal\n          width={window.innerWidth}\n          height={window.innerHeight - 30}\n          style={{ top: 0 }}\n          icon=\"computer\"\n          title={selectedRecipe}\n          closeModal={closeModal}\n          buttons={[{ value: 'Close', onClick: closeModal }]}\n        >\n          {selectedRecipe}\n        </Modal>\n      )}\n\n      <Frame\n        style={{ position: ' fixed', bottom: 0, left: 0, right: 0 }}\n        width=\"100%\"\n        p={2}\n      >\n        <Button\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '2px 3px',\n          }}\n        >\n          <Icon name=\"logo\" style={{ marginRight: 4 }} width={20} height={20} />\n          Start\n        </Button>\n      </Frame>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}