{"version":3,"sources":["components/Recipe.js","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["StyledRecipe","styled","div","Name","span","Recipe","name","rest","style","marginBottom","Wrapper","Recipes","recipes","setSelectedRecipe","openModal","title","Object","keys","length","icon","defaultPosition","x","y","marginLeft","height","width","window","innerWidth","menu","list","Item","bg","boxShadow","overflowY","maxHeight","values","map","recipe","key","onClick","localforage","config","driver","WEBSQL","version","size","storeName","description","Hero","h1","App","useState","setRecipes","selectedRecipe","showModal","toggleModal","closeModal","useEffect","a","getItem","Tabletop","init","callback","_","models","forEach","m","tabletop","raw","pIndex","elements","findIndex","e","Ingredientes","toLowerCase","includes","ingredients","slice","preparation","setItem","simpleSheet","fetchData","innerHeight","top","buttons","value","legend","i","ingredient","measure","Quantidade","Medida","marginTop","margin","padding","position","bottom","left","right","p","display","justifyContent","alignItems","marginRight","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58916b88.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@react95/core/dist';\nimport styled from '@xstyled/styled-components';\n\nconst StyledRecipe = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n`;\n\nconst Name = styled.span``;\n\nconst Recipe = ({ name, ...rest }) => (\n  <StyledRecipe {...rest}>\n    <Icon name=\"file_text\" style={{ marginBottom: 4 }} />\n    <Name>{`${name}.txt`}</Name>\n  </StyledRecipe>\n);\n\nexport default Recipe;\n","import React from 'react';\nimport styled from '@xstyled/styled-components';\nimport { Frame, Modal, List } from '@react95/core/dist';\n\nimport Recipe from './Recipe';\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 10px;\n`;\n\nconst Recipes = ({ recipes, setSelectedRecipe, openModal }) => (\n  <Modal\n    title={`${Object.keys(recipes).length} recipes`}\n    icon=\"windows_explorer\"\n    defaultPosition={{ x: 0, y: 50 }}\n    style={{\n      marginLeft: 20,\n      height: 'auto',\n    }}\n    width={window.innerWidth - 40}\n    menu={[\n      {\n        name: 'File',\n        list: (\n          <List>\n            <List.Item>Filter</List.Item>\n          </List>\n        ),\n      },\n    ]}\n  >\n    <Frame\n      bg=\"white\"\n      boxShadow=\"in\"\n      height=\"100%\"\n      style={{\n        overflowY: 'auto',\n        maxHeight: '60vh',\n      }}\n    >\n      <Wrapper>\n        {Object.values(recipes).map(recipe => (\n          <Recipe\n            key={recipe.name}\n            onClick={() => {\n              setSelectedRecipe(recipe);\n              openModal();\n            }}\n            name={recipe.name}\n          />\n        ))}\n      </Wrapper>\n    </Frame>\n  </Modal>\n);\n\nexport default Recipes;\n","import React, { useEffect, useState } from 'react';\nimport Tabletop from 'tabletop';\nimport styled from '@xstyled/styled-components';\nimport {\n  ThemeProvider,\n  GlobalStyle,\n  Frame,\n  Modal,\n  Button,\n  Icon,\n} from '@react95/core/dist';\n\nimport localforage from 'localforage';\n\nimport { Recipes } from './components';\nimport Fieldset from '@react95/core/dist/Fieldset';\n\nlocalforage.config({\n  driver: localforage.WEBSQL,\n  name: '95Recipes.db',\n  version: 1.0,\n  size: 4980736,\n  storeName: 'recipes',\n  description: 'Contains all recipes information',\n});\n\nconst Hero = styled.h1`\n  font-size: 40px;\n  width: 100%;\n  text-align: center;\n`;\n\nfunction formatQtd(ingredient) {\n  if (!ingredient.Quantidade && !ingredient.Medida) {\n    return '';\n  } else if (ingredient.Medida === 'Inteiros') {\n    return ingredient.Quantidade;\n  } else if (ingredient.Quantidade && ingredient.Medida) {\n    return `${ingredient.Quantidade} ${ingredient.Medida}`;\n  }\n}\n\nfunction App() {\n  const [recipes, setRecipes] = useState({});\n  const [selectedRecipe, setSelectedRecipe] = useState({});\n  const [showModal, toggleModal] = useState(false);\n\n  function openModal() {\n    toggleModal(true);\n  }\n\n  function closeModal() {\n    toggleModal(false);\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      const recipes = await localforage.getItem('recipes');\n\n      if (!recipes) {\n        Tabletop.init({\n          key: '1Uou8R5Bgrdl9M8ykKZeSj5MAl_huugiG3rRIQyMtxvI',\n          callback: (_, { models }) => {\n            Object.values(models).forEach(m => {\n              delete m.tabletop;\n              delete m.raw;\n\n              const pIndex = m.elements.findIndex(e =>\n                e.Ingredientes.toLowerCase().includes('preparo'),\n              );\n\n              m.ingredients = m.elements.slice(0, pIndex);\n              m.preparation = m.elements.slice(pIndex + 1, m.elements.length);\n            });\n\n            localforage.setItem('recipes', models);\n            setRecipes(models);\n          },\n          simpleSheet: true,\n        });\n      } else {\n        setRecipes(recipes);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <ThemeProvider>\n      <GlobalStyle />\n      <Hero>95 Recipes </Hero>\n\n      {Object.keys(recipes).length > 0 && (\n        <Recipes\n          recipes={recipes}\n          openModal={openModal}\n          setSelectedRecipe={setSelectedRecipe}\n        />\n      )}\n\n      {showModal && (\n        <Modal\n          width={window.innerWidth}\n          height={window.innerHeight - 30}\n          style={{ top: 0 }}\n          icon=\"bat_exec\"\n          title={selectedRecipe.name}\n          closeModal={closeModal}\n          buttons={[{ value: 'Close', onClick: closeModal }]}\n        >\n          <Fieldset legend=\"Ingredients\">\n            {selectedRecipe.ingredients.map(i => {\n              const measure = formatQtd(i);\n              return (\n                <div key={i.Ingredientes}>\n                  <strong>{`${measure} ${i.Ingredientes}`}</strong>\n                  {!measure ? ' a gosto' : ''}\n                  {i['Observação'] && ` - (${i['Observação'].toLowerCase()})`}\n                </div>\n              );\n            })}\n          </Fieldset>\n\n          {selectedRecipe.preparation.length > 0 && (\n            <Fieldset legend=\"How to prepare\" style={{ marginTop: 8 }}>\n              <ol style={{ margin: 0, padding: '0 0 0 12px' }}>\n                {selectedRecipe.preparation.map(i => (\n                  <li key={i.Ingredientes}>{i.Ingredientes}</li>\n                ))}\n              </ol>\n            </Fieldset>\n          )}\n        </Modal>\n      )}\n\n      <Frame\n        style={{ position: ' fixed', bottom: 0, left: 0, right: 0 }}\n        width=\"100%\"\n        p={2}\n      >\n        <Button\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '2px 3px',\n          }}\n        >\n          <Icon name=\"logo\" style={{ marginRight: 4 }} width={20} height={20} />\n          Start\n        </Button>\n      </Frame>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}